			TO INSTALL DECODERS PACKAGE
WARNING:

Because of the high number of destination platforms, it is wise to consult the
CUSTOMIZE file in this directory to set configuration variables. On minimum set:

# netCDF header file and library references:
# CPP_NETCDF=/usr/local/netcdf/include
# LD_NETCDF='-L/usr/local/netcdf/lib -lnetcdf'
#
# udunits header file and library references:
# CPP_UDUNITS=-I/usr/local/udunits/include
# LD_UDUNITS='-L/usr/local/udunits/lib -ludunits'
#

If your configuration was incorrect after running ./configure, one needs to
reset to the default configurations by running command:

% make distclean


USING DEFAULTS:

If

    1. You want an optimized (i.e. `-O') version of the software; and

    2. You want to use the compilers referenced by your PATH environment
       variable; and

    3. You want the software to be installed in peer directories of the
       directory containing this file (e.g. in `../bin/', `../lib/',
       `../etc', etc.),

then execute commands similar to the following (note: the following commands
log the installation process and allow you to view it at the same file):

    Using csh(1) or tcsh(1):

	% (./configure && make all install clean) >&! log &
	% tail -f log

    Using sh(1) or bash(1):

	$ (./configure && make all install clean) &> log &
	$ tail -f log

If the above defaults are unacceptable, then please read the next section.


USING CUSTOMIZATIONS:

1.  Configure the package for your system.  In the directory that this
file is in, type `./configure'.  If you're using `csh' on an old
version of System V, you might need to type `sh configure' instead to
prevent `csh' from trying to execute `configure' itself.

The `configure' shell script attempts to guess correct values for
various system-dependent variables used during compilation, and
creates the Makefile(s) (one in each subdirectory of the source
directory).  In some packages it creates a C header file containing
system-dependent definitions.  It also creates a file `config.status'
that you can run in the future to recreate the current configuration.

Running `configure' takes a minute or two.  While it is running, it
prints some messages that tell what it is doing.  If you don't want to
see the messages, run `configure' with its standard output redirected
to `/dev/null'; for example, `./configure >/dev/null'.

By default, `make install' will install the package's files in
../bin, ../lib, ../man, etc.  You can specify an installation
prefix other than /usr/local by giving `configure' the option
`--prefix=PATH'.  Alternately, you can do so by changing the `prefix'
variable in the Makefile that `configure' creates (the Makefile in the
top-level directory, if the package contains subdirectories).

You can specify separate installation prefixes for
architecture-specific files and architecture-independent files.  If
you give `configure' the option `--exec_prefix=PATH', the package will
use PATH as the prefix for installing programs and libraries.  Data
files and documentation will still use the regular prefix.  Normally,
all files are installed using the regular prefix.

You can tell `configure' to figure out the configuration for your
system, and record it in `config.status', without actually configuring
the package (creating `Makefile's and perhaps a configuration header
file).  To do this, give `configure' the `--no-create' option.  Later,
you can run `./config.status' to actually configure the package.  This
option is useful mainly in `Makefile' rules for updating `config.status'
and `Makefile'.  You can also give `config.status' the `--recheck'
option, which makes it re-run `configure' with the same arguments you
used before.  This is useful if you change `configure'.

`configure' ignores any other arguments that you give it.

If your system requires unusual options for compilation or linking
that `configure' doesn't know about, you can give `configure' initial
values for some variables by setting them in the environment.  In
Bourne-compatible shells, you can do that on the command line like
this:
	CC='gcc -traditional' DEFS=-D_POSIX_SOURCE ./configure

The `make' variables that you might want to override with environment
variables when running `configure' are:

(For these variables, any value given in the environment overrides the
value that `configure' would choose:)
CC		C compiler program.
		Default is `cc'.
INSTALL		Program to use to install files.
		Default is `install -c' if you have it, `cp' otherwise.

(For these variables, any value given in the environment is added to
the value that `configure' chooses:)
DEFS		Configuration options, in the form `-Dfoo -Dbar ...'
LIBS		Libraries to link with, in the form `-lfoo -lbar ...'

Alternatively, you can give `configure' initial values by modifying the file
CUSTOMIZE.

If you need to do unusual things to compile the package, we encourage
you to figure out how `configure' could check whether to do them, and
mail diffs or instructions to the address given in the README so we
can include them in the next release.

2.  Type `make' to compile the package.  If you want, you can override
the `make' variables CFLAGS and LDFLAGS like this:

	make CFLAGS=-O2 LDFLAGS=-s

3.  Type `make install' to install programs, data files, and
documentation.

4.  You can remove the program binaries and object files from the
source directory by typing `make clean'.  To also remove the
Makefile(s), the header file containing system-dependent definitions
(if the package uses one), and `config.status' (all the files that
`configure' created), type `make distclean'.

The file `configure.in' is used as a template to create `configure' by
a program called `autoconf'.  You will only need it if you want to
regenerate `configure' using a newer version of `autoconf'.
